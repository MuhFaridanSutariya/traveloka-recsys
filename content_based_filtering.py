# -*- coding: utf-8 -*-
"""content-based_filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rTCc5pz2QbtNHr8Atcfd3acpZKCYA0XV

## Import library dan dataset
"""

import pandas as pd
import warnings

pd.set_option('display.float_format', lambda x: '%.4f' % x)
warnings.filterwarnings('ignore')


df = pd.read_csv("/content/data_traveloka.csv")

"""## Exploratory Data Analysis"""

# cek overview dataset secara random
df.sample(3)

# total dimensi data
print("rows: {} dan cols: {}".format(df.shape[0], df.shape[1]))

# cek informasi dari tiap fitur pada dataset
df.info()

# total data hotel dibali 
# total lokasi hotel dibali 
print('Jumlah data hotel dibali:', len(df['Hotel Name'].unique()))
print('Jumlah data lokasi hotel dibali:', len(df['location'].unique()))

# cek lokasi hotel terbanyak pada dataset
lokasi = df['location'].value_counts()[:5]
lokasi.plot(kind='bar', figsize=(8,8))

"""## Data Preprocessing"""

# melihat missing value
Total = df.isnull().sum().sort_values(ascending=False)          

Percent = (df.isnull().sum()*100/df.isnull().count()).sort_values(ascending=False)   

missing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    
missing_data

# menghapus missing value pada dataset
df = df.dropna()

# menghilangkan karakter unik pada dataset untuk dilakukan convert dataset
df['Original price'] = df['Original price'].str.replace('Rp ', '')
df['Original price'] = df['Original price'].str.replace('.', '')
df['Price after discount'] = df['Price after discount'].str.replace('Rp ', '')
df['Price after discount'] = df['Price after discount'].str.replace('.', '')
df['location'] = df['location'].str.replace(',', '')
df['location'] = df['location'].str.replace(' ', '')
df.head()

# convert fitur dari object ke integer
cols = ['Original price', 'Price after discount'  ]

for col in cols:
  df[col] = df[col].astype('int')

# cek statistika deskripsi pada fitur dataset
df.describe()

df = df.drop(columns='Tax')

df.head()

# validasi duplikat value
df1 = df.copy()
df1["is_duplicate"]= df1.duplicated()

df3 = []
duplikat = df1[df1['is_duplicate'] == True]
for i in duplikat['Hotel Name']:
  df3.append(df1[df1['Hotel Name'] == i])
out = pd.concat(df3,ignore_index = True)
out

# cek total data duplikat
df.duplicated().sum()

# menghapus data duplikat pada dataset
df = df.drop_duplicates()

df.sample(3)

"""## Modelling"""

from sklearn.feature_extraction.text import TfidfVectorizer
 
# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data cuisine
tf.fit(df['location']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(df['location']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan jenis masakan
# Baris diisi dengan nama resto
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=df['Hotel Name']
).sample(10, axis=1).sample(10, axis=0)

from sklearn.metrics.pairwise import cosine_similarity
 
# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama resto
cosine_sim_df = pd.DataFrame(cosine_sim, index=df['Hotel Name'], columns=df['Hotel Name'])
print('Shape:', cosine_sim_df.shape)
 
# Melihat similarity matrix pada setiap resto
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

# validasi hasil cosine similarity
df[df['Hotel Name'] == "Hotel Kumala Pantai"]

# validasi hasil cosine similarity
df[df['Hotel Name'] == "OYO 1654 Maha Bharata Kuta Inn"]

# membuat sebuah fungsi untuk menampilkan 5 data teratas hotel rekomendasi berdasarkan lokasi
def hotel_recommendations(nama_hotel, similarity_data=cosine_sim_df, items=df[['Hotel Name', 'location']], k=5):
 
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_hotel].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop nama_hotel agar nama resto yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_hotel, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

# validasi hasil dari fungsi hotel_recommendations
df[df['Hotel Name'].eq('Matahari Bungalow')]

"""## Evaluation"""

# menampilkan 5 data teratas rekomendasi hotel berdasarkan lokasi Legian, Bali
hotel_recommendations('Matahari Bungalow')